<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://firemakerwillow.github.io</id>
    <title>工业区的后宅</title>
    <updated>2021-02-21T13:42:41.084Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://firemakerwillow.github.io"/>
    <link rel="self" href="https://firemakerwillow.github.io/atom.xml"/>
    <subtitle>一代人终将老去，但总有人永远年轻</subtitle>
    <logo>https://firemakerwillow.github.io/images/avatar.png</logo>
    <icon>https://firemakerwillow.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 工业区的后宅</rights>
    <entry>
        <title type="html"><![CDATA[python c++ 对比教程]]></title>
        <id>https://firemakerwillow.github.io/post/python-c-dui-bi-jiao-cheng/</id>
        <link href="https://firemakerwillow.github.io/post/python-c-dui-bi-jiao-cheng/">
        </link>
        <updated>2021-02-21T13:25:08.000Z</updated>
        <content type="html"><![CDATA[<h1 id="前言">前言</h1>
<p>这是博主的第一篇“技术”博客，浅显直白，试水之作，还望海涵。</p>
<p>本教程提供学习python的一种思路，对比c++教程，看python的异同之处。如果先前已经学习过c++，那么这将是一种学习python的很自然的思路。</p>
<h1 id="一-hello-world">一. hello world</h1>
<pre><code class="language-c++"># include &lt;iostream&gt;
using namespace std;
int main()
{
  cout&lt;&lt;&quot;hello world&quot;;
  return 0;
}
</code></pre>
<pre><code class="language-python">print('hello world')
</code></pre>
<p>可以看到python的“hello world”程序较c++非常简单。这是因为c++是一门<mark>编译型语言</mark>，需要非常完整的程序结构，有主程序。而python是一门<mark>解释型语言</mark>，程序从上到下一句一句执行，不需要完整的程序结构。</p>
<p>python的解释性使它不仅可以通过程序运行，还可以交互式运行，在terminal里输入python3，如果下载了ipython3，也可以输入ipython3，进入交互式使用界面。</p>
<p>这里解释一下为什么是python3 ，因为python3 是python的全新版本，python创造者为了它的完美放弃了向下兼容，也就是说，python 中的部分程序是不能在最新的python3中运行的。</p>
<h1 id="二-注释">二. 注释</h1>
<pre><code class="language-c++">// 这是一个行注释
/*这是一个块注释
这是一个块注释
这是一个块注释*/
</code></pre>
<pre><code class="language-python"># 这是一个行注释
'''
这是一个块注释
这是一个块注释
这是一个块注释
'''
</code></pre>
<p>注释容易混淆</p>
<h1 id="三-基本数据类型">三 .基本数据类型</h1>
<pre><code class="language-c++">#include&lt;iostream&gt;
int main()
{
  int num = 0;
  float numpoint = 1.2;
  double numlongpoint = 6.9;
  char character = 'a';
  bool tof = true;
  
}
</code></pre>
<pre><code class="language-python">num = 0
numpoint = 1.2
character = 'a'
tof = True
</code></pre>
<p>python 不需要指定数据类型。C++和python的变量机制似乎不同（此处我的理解很模糊）：c++是首先根据变量类型分配空间，然后在空间内赋值，python是首先有一个值，然后给这个值绑上一个标签。</p>
<h1 id="四-高级数据类型">四. 高级数据类型</h1>
<pre><code class="language-c++"># include&lt;iostream&gt;
int main()
{
  // 枚举
  enum color_set1 {red,blue,white,black};
  // 枚举常量 red=0 blue=1  
  color_set1 color1;
  color1 = red;
  color_set1 color2 = blue;
}
</code></pre>
<p>枚举类型主要作用是提高代码可读性。</p>
<pre><code class="language-c++"># include &lt;iostream&gt;
int main()
{
  // 数组
  int numset1[20];
  char charaset2[30];
  // 初始化数组
  double balance[] = {1000.0, 2.0, 3.4, 7.0, 50.0};
  char str1[] = &quot;hbibnjnl&quot;;
}
</code></pre>
<p>数组必须在定义时确定大小</p>
<pre><code class="language-c++"># include &lt;iostream&gt;
# include &lt;cstring&gt;
# include &lt;string&gt;
using namespace std;
int main()
{
  // cstring字符串
  char str1[13] = &quot;runoob&quot;;// 共7位，最后一位为'\0'
  char str2[13] = &quot;google&quot;;
  char str3[13];
  int  len ;
  
   // 复制 str1 到 str3
  strcpy( str3, str1);
  cout &lt;&lt; &quot;strcpy( str3, str1) : &quot; &lt;&lt; str3 &lt;&lt; endl;
 
   // 连接 str1 和 str2
  strcat( str1, str2);
  cout &lt;&lt; &quot;strcat( str1, str2): &quot; &lt;&lt; str1 &lt;&lt; endl;
 
   // 连接后，str1 的总长度
  len = strlen(str1);
  cout &lt;&lt; &quot;strlen(str1) : &quot; &lt;&lt; len &lt;&lt; endl;
 
  // string 字符串
  string str1 = &quot;runoob&quot;;
  string str2 = &quot;google&quot;;
  string str3;
  int  len ;
 
  // 复制 str1 到 str3
  str3 = str1;
  cout &lt;&lt; &quot;str3 : &quot; &lt;&lt; str3 &lt;&lt; endl;
 
   // 连接 str1 和 str2
  str3 = str1 + str2;
  cout &lt;&lt; &quot;str1 + str2 : &quot; &lt;&lt; str3 &lt;&lt; endl;
 
   // 连接后，str3 的总长度
  len = str3.size();
  cout &lt;&lt; &quot;str3.size() :  &quot; &lt;&lt; len &lt;&lt; endl;
 
  
  return 0;
}


</code></pre>
<p>字符串有两种，cstring的字符串保留了更多的c的味道，string字符串更符合面向对象的设计思想，需要引用不同的库</p>
<pre><code class="language-c++"># include &lt;iostream&gt;
int main()
{
  //指针
 	char * str1;
  str1 = new char [] = &quot;hello world&quot;;
  delete str1;
  int * num1;
  int num2 = 3;
  num1 = &amp; num2; //在指针表量中存储 num2 的地址
 	std::cout &lt;&lt; num1 &lt;&lt;endl; //输出 num2 的地址
  std::cout &lt;&lt; *num1 &lt;&lt; endl; //输出num2的值 
  num1 = NULL; // 设置空指针
}
</code></pre>
<pre><code class="language-python"># 元组
tuple1 = (1,4,1,&quot;2345&quot;,True)
print(tuple1[2])
a = tuple1.index(1)
b = tuple1.count(1)
</code></pre>
<p>元组的特性是不可修改，常常用于函数传递多个参数使用</p>
<pre><code class="language-python"># 列表
list1 = ['red','blue','yelloow','white','black']
print(list1)
print (list1[-1])
print (list1[0])
'''
列表支持的操作
append 增加，在列表末尾加元素

count 统计某一元素出现次数

insert，插入元素

reverse，列表反向

clear，盲猜清除

extend，在列表末尾一次性追加一个列表的值

pop,移除队尾元素，并返回该元素的值

sort 排序

copy 暂时不清楚它的作用

index，找到某值对应的第一个索引位置

remove；移除第一个该元素
'''

</code></pre>
<p>列表可以用不同类型的值，但一般都会用相同类型的值</p>
<pre><code class="language-python"># 字典 
# 由键值对构成，:前为键，:后为值
# 键必须是数字，字符串，或元组
dic = {
  'num1' : 1
  'num2' : 2
  'str' :&quot;snkckjk&quot;
  'tuple1' : (12,34)
  'list1' : [12,23,45]
}
print(dic['num1'])
# dict 的内置方法
dic.items() #返回一个字典的键值对

dic.keys() #返回一个字典的键

dic.values() #返回一个字典的所有值,类型为dict_values 非常奇怪

dic.pop(key) #删除给定键key所对应的值

dic.get(key,default=None) # 返回指定键的值，如果值不在就返回default

dic.setdefault(key,default=None) #返回键值，如果键不存在，就创建key，值为default

dic.update(dict2) #将dict2的值更新在dic里，有键则更新，无键则增加


 
</code></pre>
<pre><code class="language-python"># 字符串
var1 = 'hello world'
var2 = 'hello python'

# 字符串索引 支持从前向后和从后向前
var1[2]
var2[-2]

# 字符串操作
var3 = var1 + var2
var4 = var1* 12
'he ' in var1   # 判断
'wo' not in var2

# 字符串方法

</code></pre>
<p>字符串方法太多，有需求请去查表，大致可分为以下几类</p>
<p>分类</p>
<ol>
<li>
<p>包含is，是否判断</p>
</li>
<li>
<p>查找和判断，涉及两个字符</p>
</li>
<li>
<p>大小写转换，</p>
</li>
<li>
<p>涉及对齐，可以居中对齐，可以左对齐，右对齐</p>
</li>
<li>
<p>去除空白字符，和对齐配合使用</p>
</li>
<li>
<p>字符串的拆分与拼接</p>
</li>
</ol>
<p><a href="https://www.runoob.com/python/python-strings.html">菜鸟教程｜python3 字符串</a></p>
<p>字典和列表常常同时使用，在字典中存储一个物体的全部信息，然后把各个物体的所有信息存储在一个列表内。<br>
总的来看，python 中没有指针，字符串相较于c++封装的更像一个对象，而元组，列表，字典加起来吊打数组，比数组的功能强大的多。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[markdown 语法]]></title>
        <id>https://firemakerwillow.github.io/post/markdown-yu-fa/</id>
        <link href="https://firemakerwillow.github.io/post/markdown-yu-fa/">
        </link>
        <updated>2021-02-21T09:16:10.000Z</updated>
        <content type="html"><![CDATA[<p>[toc]</p>
<h1 id="markdown-exercise-1">markdown exercise 1</h1>
<p>本文是对typora官方文档的简化，记录了除网络和tex语法外的markdown语法。我将剩下的语法简单分类为文本工具和编辑工具。其中文本工具主要用于让字体显得不同，编辑工具让不同的文段承担不同的功能。tex语法和网络部分的语法会在我学习了tex语法和网络语法后展示😓😓😓。</p>
<p>每个语法点分为两部分，前一部分为效果演示，后一部分为语法。这一篇同时也是一篇markdown语法的测试。</p>
<h2 id="1text-tools">1.text tools</h2>
<h4 id="11-strong">1.1 Strong</h4>
<p><strong>strong</strong>     <em>*strong</em>*   or _<em>strong</em>_</p>
<h4 id="12-emphasis">1.2 Emphasis</h4>
<p><em>emphsis</em>    *emphsis*  or  _emphsis_</p>
<h4 id="13-highlight">1.3 highlight</h4>
<p><mark>highlight</mark>    ==highlight==</p>
<h4 id="14-strikethrough">1.4 strikethrough</h4>
<p><s>strikethrough</s>   ~~strikethrough~~</p>
<h4 id="15underlines">1.5Underlines</h4>
<p><u>Underlines</u>    &lt;u&gt;Underlines&lt;/u&gt;</p>
<h4 id="16-subscript">1.6 Subscript</h4>
<p>H<sub>2</sub>O   H~2~O</p>
<h4 id="17-superscript">1.7 Superscript</h4>
<p>x<sup>2</sup>   x^2^</p>
<h2 id="2exit-tools">2.exit tools</h2>
<h4 id="21-table">2.1 table</h4>
<table>
<thead>
<tr>
<th>table1</th>
<th>table2</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>|table1|table2|</p>
<h4 id="22-blockquotes">2.2 Blockquotes</h4>
<blockquote>
<p>This is a blockquote</p>
</blockquote>
<p>&gt; this is a blockquote</p>
<h4 id="23-lists">2.3 Lists</h4>
<ul>
<li>item1</li>
<li>item2</li>
</ul>
<ol>
<li>item1</li>
<li>item2</li>
</ol>
<p>* items</p>
<p>\1. items</p>
<h4 id="24-task-list">2.4 Task List</h4>
<ul class="contains-task-list">
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-2246991"><label class="task-list-item-label" for="task-item-2246991"> Task1</label></li>
<li class="task-list-item"><input class="task-list-item-checkbox" disabled="" type="checkbox" id="task-item-3840703"><label class="task-list-item-label" for="task-item-3840703"> Task2</label></li>
</ul>
<p>- [ ] task1</p>
<h4 id="25-code-blocks">2.5 Code Blocks</h4>
<pre><code class="language-python">def script():
</code></pre>
<pre><code>print('this is a code block')
return 0

script()

</code></pre>
<p>```</p>
<h4 id="26-lines">2.6 Lines</h4>
<hr>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[从《你好，李焕英》到《妈妈再爱我一次》]]></title>
        <id>https://firemakerwillow.github.io/post/cong-lesslessni-hao-li-huan-ying-greatergreater-dao-lesslessma-ma-zai-ai-wo-yi-ci-greatergreater/</id>
        <link href="https://firemakerwillow.github.io/post/cong-lesslessni-hao-li-huan-ying-greatergreater-dao-lesslessma-ma-zai-ai-wo-yi-ci-greatergreater/">
        </link>
        <updated>2021-02-18T14:36:33.000Z</updated>
        <content type="html"><![CDATA[<p>《你好，李焕英》这个片子我非常满意，我心甘情愿地献出了自己的眼泪。父母之爱是人间大爱，这个类型的片子很难不让人产生共鸣。督工对这个影片也非常的满意，为此还专门更新了一期《睡前消息》发表影评。</p>
<p><a href="https://www.bilibili.com/video/BV1Ev4y1Z7TG">【睡前消息236】生于1981，我带着回忆看“李焕英”</a></p>
<figure data-type="image" tabindex="1"><img src="https://firemakerwillow.github.io/post-images/1613659089209.png" alt="" loading="lazy"></figure>
<p>督工主要从电影的真实性上发表看法，他认为时代感是这部影片最显著的优点。这部影片非常逼真地再现了80年代大型厂区的工人生活。集体食堂，能放电影的演出舞台，同时承担篮球和排球的水泥操场，一丝一扣都非常真实，作为一部商业片达到了纪录片的效果。</p>
<p>而我，已经深深的陶醉在李焕英的状貌上了，这是一种毫无棱角却又亭亭玉立的美感。如果我没看错的话，这应该就是多次和贾玲在春晚上合作的那个喜剧演员，回忆她们俩之前的作品，一般都是贾玲演婆婆或者妈，张小斐演媳妇或者女儿，这次她们俩掉了个儿，这本身就是一件很有趣的事情。</p>
<p>“李焕英”的演员是东北人，以前提起东北女人，总是一种东北大妞的刻板印象。经历了冰冰，经历了这个影片，这种地图炮式的刻板印象该改改了。</p>
<figure data-type="image" tabindex="2"><img src="https://firemakerwillow.github.io/post-images/1613659104587.webp" alt="" loading="lazy"></figure>
<p><em>啊！太好看了！太好看了吧！</em></p>
<p>我觉得督工从真实性这方面谈论这部影片纯粹是既想求得新颖，又不想多费功夫。真实性完全不是这部影片真正出彩的地方，只是锦上添花而已。真正打动我的，是它的立意——“打我有记忆起，妈妈就是个中年妇女的样子。所以我总忘记妈妈曾经也是个花季少女”，是女儿和母亲闺蜜般的感情，是一心只想给母亲带来欢乐，带来更好的生活，甚至愿意自己不会降生的女儿，是不管女儿多么普通，多么比不过人，都支持她，安慰她，以她为傲的母亲，是母亲弥留之际说“宝啊，你要健健康康，快快乐乐”，女儿撕心裂肺的那句“我不能”。</p>
<p>女儿离不开妈妈，妈妈离不开女儿，“下辈子我当妈”，“不，下辈子还是我当妈”。这是真正的爱，普通却又难得，易懂却又易忘。这种爱，真正予人力量，真正治愈人心。</p>
<p>影片催人泪下，却又不过度煽情，贾玲对自己的母亲有着强烈的感情，想要输出很多的情绪和想法，但是能做到克制，将情绪把握的非常合适，这一点非常不容易。</p>
<p>影片的一些细节也是经得起考究的，比如“冷特”这个戏份很重但最后也没有什么结局的人物。这种人物，我一般称之为“工具人”，这种人物纯粹就是为了推进情节发展而设立的。“冷特”在几处情节的发展上发挥了重要作用，比如帮厂长家儿子追求李焕英。一般这种人物就点到为止就好了，但是贾玲还给他安排了一段感情戏，还用他的母亲的病危再次表达对母亲的愧疚，平衡了电影中段浓郁的喜剧氛围，让观众始终做到笑中有泪，也真算是物尽其用了。</p>
<figure data-type="image" tabindex="3"><img src="https://firemakerwillow.github.io/post-images/1613659113441.webp" alt="" loading="lazy"></figure>
<p><em>老工具人了</em></p>
<p>电影结束后，母亲回忆起她们时代最为火爆的亲情类电影《妈妈再爱我一次》，这部九十年代的电影在当时血洗了1个亿的票房，共计约2亿人观看，这个火爆程度远远超过了我听说过的所有影片，当然也远远超过了《你好，李焕英》这部影片。据说当时从电影院出来没有一个人不是哭着的。所以回家之后我和母亲一起看了一遍这个影片。</p>
<figure data-type="image" tabindex="4"><img src="https://firemakerwillow.github.io/post-images/1613659124750.webp" alt="" loading="lazy"></figure>
<p>我对这个影片的评价很低，这个影片配不上它在豆瓣上8.3分的评分，它的情节在今天看来已经成为俗套，出身低微的母亲和出身富豪的父亲相爱，却因为家庭的差距不能成婚，不得以母亲带孕离开，历尽辛苦抚养孩子长大，与她人成婚的父亲却不能再生育，这个孩子将是富豪家族唯一的血脉。于是富豪家族软硬结合想要夺走孩子，母亲为了孩子的前途考虑最终同意送走孩子，但孩子和母亲彼此思念，生不如死，孩子屡次离家出走去找母亲，母亲忍痛教训孩子让他不要再回来，不然她就要躲起来再也不见他。母亲为爱折磨，失心成疯，流离不知所终。而孩子学成归来，最后成为一家精神病院的新院长，在医院找到了自己的母亲，两者终得相认，终得团圆。</p>
<p>整个影片情节过于孱弱，只好用煽情来填充内容。大段大段的哭戏可能在当时能起到煽情的作用，但在我这里只能引起生理不适。仔细想想的话，导演还是做出了一些技法上的尝试，甚至有向现代工业电影发展的倾向。比如知道将父亲结婚和母亲的痛苦生产剪在一起，虽然清代的红楼梦就知道这么写了；比如注重情感上的起伏，将母子在一起的快乐和母子分离的痛苦相间，让观众在对比中感受感情；比如知道运用“世上只有妈妈好”和“母亲买给孩子的熊猫”这样的道具来推动情节，虽然运用的非常生硬；比如注意情节高潮的设置，知道在影片的30min左右设置一个小高潮。</p>
<p>尽管如此，这部影片是不过关的，这说明了红极一时的文化产品不一定就是好的文化产品，好的文化产品应该能经得起时间的考验。</p>
<p>这部影片反映了一些时代的印记。这个影片说明了在九十年代，台湾已经具备了相当规模的单亲家庭，虽然单亲妈妈仍要面对非议，但已经成为一个社会现象，可以被自然吸纳为文化产品的题材。这个影片还说明了当时部分台湾单亲家庭依靠母亲自身的劳动已经可以让自己和孩子获得美满幸福的生活，有条件让孩子接受教育。妇女参加劳动，这是工业时代的典型特征，但对应的，落后的思想依然在台湾保留，比如孩子得病之后，母亲不是留在孩子身边陪护，而是叩长头前往寺庙；比如没有儿子，注意影片中就是儿子，就算绝后，是不能被家族接受的事情。</p>
<p>影片中反映的爱我也不能接受，爱应该给人力量，而不是让人痛苦，如果爱让人如此痛苦，还是不要爱好了。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[博主的话]]></title>
        <id>https://firemakerwillow.github.io/post/about/</id>
        <link href="https://firemakerwillow.github.io/post/about/">
        </link>
        <updated>2021-02-17T11:09:48.000Z</updated>
        <content type="html"><![CDATA[<p>欢迎来到我的小站呀，很高兴遇见你！🤝<br>
<img src="https://firemakerwillow.github.io/post-images/1613546448009.jpeg" alt="" loading="lazy"></p>
<h2 id="关于本站">🏠 关于本站</h2>
<p>工业区的后宅，以后想写的东西，上课的笔记，随感都会整理整理发这里，网址不会变吧（<s>大概</s>）<br>
网址是firemakerwillow，《饥荒》玩家可以狂喜了</p>
<h2 id="博主是谁">👨‍💻 博主是谁</h2>
<p>封面是本人了（bushi），发量充沛的小小小小小白，有人浏览自己的破站会高兴的不得了，当然你不想浏览他也想的开</p>
<h2 id="兴趣爱好">⛹ 兴趣爱好</h2>
<p>喜欢活着，其他都可以将就<br>
在家喜欢咸鱼<br>
开车时喜欢听摇滚<br>
不好喝酒，但是喜欢买精酿，因为瓶子洋气</p>
<h2 id="联系我呀">📬 联系我呀</h2>
<p>QQ：2410224215（不会真的有人对博主感兴趣吧，不会吧，不会吧</p>
]]></content>
    </entry>
</feed>